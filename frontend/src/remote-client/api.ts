/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BookmarkCreationV1
 */
export interface BookmarkCreationV1 {
    /**
     * The name of the bookmark
     * @type {string}
     * @memberof BookmarkCreationV1
     */
    name: string;
    /**
     * The URL of the bookmark
     * @type {string}
     * @memberof BookmarkCreationV1
     */
    url: string;
    /**
     * The description provided for a bookmark
     * @type {string}
     * @memberof BookmarkCreationV1
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface BookmarkV1
 */
export interface BookmarkV1 {
    /**
     * The id of the bookmark
     * @type {string}
     * @memberof BookmarkV1
     */
    id: string;
    /**
     * The name of the bookmark
     * @type {string}
     * @memberof BookmarkV1
     */
    name: string;
    /**
     * The URL of the bookmark
     * @type {string}
     * @memberof BookmarkV1
     */
    url: string;
    /**
     * The description provided for a bookmark
     * @type {string}
     * @memberof BookmarkV1
     */
    description?: string;
}

/**
 * BookmarkResourceApi - axios parameter creator
 * @export
 */
export const BookmarkResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/bookmark/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookmarkCreationV1} bookmarkCreationV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (bookmarkCreationV1: BookmarkCreationV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookmarkCreationV1' is not null or undefined
            assertParamExists('create', 'bookmarkCreationV1', bookmarkCreationV1)
            const localVarPath = `/bookmark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.net.pbforge.bookmark-creation-v1';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookmarkCreationV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/bookmark/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookmark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookmarkV1} bookmarkV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (bookmarkV1: BookmarkV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookmarkV1' is not null or undefined
            assertParamExists('update', 'bookmarkV1', bookmarkV1)
            const localVarPath = `/bookmark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.net.pbforge.bookmark-v1';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookmarkV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookmarkResourceApi - functional programming interface
 * @export
 */
export const BookmarkResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookmarkResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BookmarkCreationV1} bookmarkCreationV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(bookmarkCreationV1: BookmarkCreationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookmarkV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(bookmarkCreationV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookmarkV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookmarkV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BookmarkV1} bookmarkV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(bookmarkV1: BookmarkV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookmarkV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(bookmarkV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookmarkResourceApi - factory interface
 * @export
 */
export const BookmarkResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookmarkResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookmarkCreationV1} bookmarkCreationV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(bookmarkCreationV1: BookmarkCreationV1, options?: any): AxiosPromise<BookmarkV1> {
            return localVarFp.create(bookmarkCreationV1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any): AxiosPromise<BookmarkV1> {
            return localVarFp.get(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): AxiosPromise<Array<BookmarkV1>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookmarkV1} bookmarkV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(bookmarkV1: BookmarkV1, options?: any): AxiosPromise<BookmarkV1> {
            return localVarFp.update(bookmarkV1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookmarkResourceApi - object-oriented interface
 * @export
 * @class BookmarkResourceApi
 * @extends {BaseAPI}
 */
export class BookmarkResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkResourceApi
     */
    public _delete(id: string, options?: any) {
        return BookmarkResourceApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookmarkCreationV1} bookmarkCreationV1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkResourceApi
     */
    public create(bookmarkCreationV1: BookmarkCreationV1, options?: any) {
        return BookmarkResourceApiFp(this.configuration).create(bookmarkCreationV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkResourceApi
     */
    public get(id: string, options?: any) {
        return BookmarkResourceApiFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkResourceApi
     */
    public list(options?: any) {
        return BookmarkResourceApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookmarkV1} bookmarkV1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkResourceApi
     */
    public update(bookmarkV1: BookmarkV1, options?: any) {
        return BookmarkResourceApiFp(this.configuration).update(bookmarkV1, options).then((request) => request(this.axios, this.basePath));
    }
}


